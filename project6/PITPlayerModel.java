package pit;

import java.io.Serializable;
import java.util.*;
import javax.jms.*;
import javax.jms.Queue;
import javax.naming.*;

/*
 * This is the ONLY file that you are to edit.  It is the model of play for
 * every PITplayer.  Each PITplayer instantiates this model and uses it to
 * process the messages it receives.
 */
public class PITPlayerModel {

    // Each PITplayer has a unique myPlayerNumber.  It is set in the PITPlayer constructor.
    private final int myPlayerNumber;
    // Cards is this player's set of cards.
    private final ArrayList cards = new ArrayList();
    // numTrades counts trades.
    private int numTrades = 0;
    // maxTrades is the maximum number of trades, after which trading is stopped.
    private final int maxTrades = 20000;
    // numPlayers are the number of Players trading.  This comes with a NewHand from the PITsnapshot servlet
    private int numPlayers = 0;
    // halting indicates that the system is being reset, so ignore trades until a new had received
    private boolean halting = false;

    /* The snapshot servlet (PITsnapshot) is expecting to be passed an ObjectMessage
     * where the  object is a HashMap. Therefore this definition of HashMap is
     * provided although it  is not currently used (it is for you to use).
     * PITsnapshot is expecting a  set of attibute/value pairs. These include the player
     * number, as in state.put("Player",myPlayerNumber),  and each commodity string
     * and the number of that commodity  in the snapshot.
     * Also included below is a utility method  that will convert a HashMap into a string
     * which is useful for printing diagnostic messages to  the console.
     */
    private HashMap<String, Integer> state = new HashMap();

    // list of markers received by the player
    private ArrayList<Integer> markers = new ArrayList<Integer>();

    // PITPlayerModel constructor saves what number player this object represents.
    PITPlayerModel(int myNumber) {
        myPlayerNumber = myNumber;
    }

    public void onMessage(Message message) {
        try {
            if (message instanceof ObjectMessage) {
                Object o = ((ObjectMessage) message).getObject();

                /*
                 * There are 6 types of messages:  Reset, NewHand, TenderOffer,
                 * AcceptOffer, RejectOffer, and Marker
                 */

                // Reset the Player.  This message is generated by the PITsnapshot servlet
                if (o instanceof Reset) {
                    doReset((Reset) o);

                    // NewHand received from PITsnapshot
                } else if (o instanceof NewHand) {
                    // Add the new hand into cards
                    doNewHand((NewHand) o);

                    // Receive an offer from another Player
                } else if (o instanceof TenderOffer) {
                    doReceiveTenderOffer((TenderOffer) o);

                    // Another Player accepted our offer
                } else if (o instanceof AcceptOffer) {
                    doReceiveAcceptOffer((AcceptOffer) o);

                    // Another Player rejected our offer
                }
                else if (o instanceof RejectOffer) {
                    doReceiveRejectOffer((RejectOffer) o);

                }
                else if (o instanceof Marker) {
                    doMarker((Marker) o);

                } else {
                    System.out.println("PITplayer" + myPlayerNumber + " received unknown Message type");
                    // just ignore it
                }
            }
        } catch (Exception e) {
            System.out.println("Exception thrown in PITplayer" + myPlayerNumber + ": " + e);
        }
    }

    private void doReset(Reset reset) throws Exception {
        // Resetting is done by two messages, first to halt, then to clear
        if (reset.action == Reset.HALT) {
            System.out.println("PITplayer" + myPlayerNumber + " received Reset HALT");
            halting = true;
            // Reply to the PITsnapshot servlet acknowledging the Reset HALT
            sendToQueue("openejb:Resource/PITmonitor", reset);
        } else { // action == Reset.CLEAR
            System.out.println("PITplayer" + myPlayerNumber + " received Reset RESET");
            // Drop all cards in hand
            cards.clear();
            numTrades = 0;
            numPlayers = 0;
            halting = false;
            // Reply to the PITsnapshot servlet acknowledging the Reset
            sendToQueue("openejb:Resource/PITmonitor", reset);
        }
    }

    private void doNewHand(NewHand hand) throws Exception {
        // Add a new hand of cards.
        // It is actually possible that an offer from another Player has been
        // accepted already, beating the NewHand
        cards.addAll((hand).newHand);
        numPlayers = (hand).numPlayers;
        System.out.println("PITplayer" + myPlayerNumber + " new hand: " + toString(cards));
        // Offer a card to another Player
        doTenderOffer();
    }

    private void doReceiveTenderOffer(TenderOffer trade) throws Exception {
        if (halting) {
            return; // if halting, discard trade
        }

        System.out.println("PITplayer" + myPlayerNumber + " received offer of: " + trade.tradeCard + " from player: " + trade.sourcePlayer);

        // when the player didn't receive the marker from that player and it didn't receive all the marker, which means the channel is not closed.
        // And the state is not empty, which means the player has already take part into the snapshot. So the state of the player should be updated.
        if (!markers.contains(trade.sourcePlayer) && markers.size() != numPlayers-1 && !state.isEmpty()) {
            if (state.containsKey(trade.tradeCard)) {
                int num = state.get(trade.tradeCard);
                state.put(trade.tradeCard, num + 1);
            } else {
                state.put(trade.tradeCard, 1);
            }
        }

        System.out.println("ReceiveTenderOffer: PITplater"+myPlayerNumber+" has ");
        // My strategy is to accept the card that is not the card of the least number.
        // So first, use a hashmap to store the card and the number it has
        HashMap<String, Integer> state1 = new HashMap();
        for (int i = 0; i < cards.size(); i++) {
            if (state1.containsKey(cards.get(i))) {
                int num = state1.get(cards.get(i));
                state1.put((String) cards.get(i), num + 1);
            } else {
                state1.put((String) cards.get(i), 1);
            }
            System.out.println(state1.get(cards.get(i))+(String)cards.get(i));
        }

        ArrayList<String> mins = new ArrayList<String>();
        ArrayList<Integer> value = new ArrayList<Integer>(state1.values());
        // sort to find the least number
        Collections.sort(value);

        // add all the cards that have the least number into th arraylist
        for (Object key : state1.keySet()) {
            if (state1.get(key)==value.get(0)){
                mins.add((String)key);
            }
        }

        // If the card is not in the least number card list, then add the card; otherwise, reject it
        if (!mins.contains(trade.tradeCard)) {
            cards.add(trade.tradeCard);
            doReplyAccept(trade.sourcePlayer);
        }
        else{
            doReplyReject(trade);
        }

    }

    private void doReplyAccept(int sendTo) throws Exception {

        // if hit maxTrades limit, then stop sending trades
        if (maxTrades(maxTrades)) {
            return;
        }

        System.out.println("Reply Accept: PITplater"+myPlayerNumber+" has ");
        // My strategy is to send the card that has the least number.
        // So first, use a hashmap to store the card and the number it has
        HashMap<String, Integer> state1 = new HashMap();
        for (int i = 0; i < cards.size(); i++) {
            if (state1.containsKey(cards.get(i))) {
                int num = state1.get(cards.get(i));
                state1.put((String) cards.get(i), num + 1);
            } else {
                state1.put((String) cards.get(i), 1);
            }
            System.out.println(state1.get(cards.get(i))+(String)cards.get(i));
        }

        // In payment for the card I just accepted, send back one of my cards.
        AcceptOffer newTrade = new AcceptOffer();

        ArrayList<String> mins = new ArrayList<String>();
        ArrayList<Integer> value = new ArrayList<Integer>(state1.values());
        // sort to find the least number
        Collections.sort(value);

        // add all the cards that have the least number into th arraylist
        for (Object key : state1.keySet()) {
            if (state1.get(key)==value.get(0)){
                mins.add((String)key);
            }
        }
        // In the least number card list, choose a random card to send
        int index = (int) (Math.random()* mins.size());
        String min_s=mins.get(index);

        cards.remove(min_s);
        newTrade.tradeCard = min_s;
        newTrade.sourcePlayer = myPlayerNumber;

        //Send the card to the other player
        System.out.println("PITplayer" + myPlayerNumber + " accepting offer and paying with: " + newTrade.tradeCard + " to player: " + sendTo);
        System.out.println("PITplayer" + myPlayerNumber + " hand: " + toString(cards));
        String sendToJNDI = "openejb:Resource/PITplayer" + sendTo;
        sendToQueue(sendToJNDI, newTrade);
    }

    // Reply rejecting an offer that was received.  Send back their card.
    private void doReplyReject(TenderOffer trade) throws Exception {
        if (halting) {
            return; // if halting, discard trade
        }

        System.out.println("PITplayer" + myPlayerNumber + " rejecting offer of: " + trade.tradeCard + " from player: " + trade.sourcePlayer);
        System.out.println("PITplayer" + myPlayerNumber + " hand: " + toString(cards));

        // if hit maxTrades limit, then stop sending trades
        if (maxTrades(maxTrades)) {
            return;
        }

        // Send back their card that I am rejecting
        RejectOffer newTrade = new RejectOffer();
        newTrade.tradeCard = trade.tradeCard;
        newTrade.sourcePlayer = myPlayerNumber;

        //Send the card to the other player
        String sendToJNDI = "openejb:Resource/PITplayer" + trade.sourcePlayer;
        sendToQueue(sendToJNDI, newTrade);

    }

    // Handle receiving a message that a previous offer has been accepted.
    // They would have replied with another card as payment.
    private void doReceiveAcceptOffer(AcceptOffer trade) throws Exception {
        if (halting) {
            return; // if halting, discard trade
        }
        // Having received a AcceptOffer from another Player, add it to my hand of cards
        cards.add(trade.tradeCard);

        System.out.println("PITplayer" + myPlayerNumber + " received: " + trade.tradeCard + " as payment from player: " + trade.sourcePlayer);
        System.out.println("PITplayer" + myPlayerNumber + " hand: " + toString(cards));
        // Make another offer to a random player
        doTenderOffer();


        // when the player didn't receive the marker from that player and it didn't receive all the marker, which means the channel is not closed.
        // And the state is not empty, which means the player has already take part into the snapshot. So the state of the player should be updated.
        if (!markers.contains(trade.sourcePlayer) && markers.size() != numPlayers-1 && !state.isEmpty()) {
            if (state.containsKey(trade.tradeCard)) {
                int num = state.get(trade.tradeCard);
                state.put(trade.tradeCard, num + 1);
            } else {
                state.put(trade.tradeCard, 1);
            }
        }
    }

    // Handle receiving a reject message regarding a prior offer I made
    private void doReceiveRejectOffer(RejectOffer trade) throws Exception {
        if (halting) {
            return; // if halting, discard trade
        }
        // Because the offer was rejected, and returned, add it back into my cards
        cards.add(trade.tradeCard);

        System.out.println("PITplayer" + myPlayerNumber + " received rejected offer of: " + trade.tradeCard + " from player: " + trade.sourcePlayer);
        System.out.println("PITplayer" + myPlayerNumber + " hand: " + toString(cards));
        // Make another offer to a random player
        doTenderOffer();

        // when the player didn't receive the marker from that player and it didn't receive all the marker, which means the channel is not closed.
        // And the state is not empty, which means the player has already take part into the snapshot. So the state of the player should be updated.
        if (!markers.contains(trade.sourcePlayer) && markers.size() != numPlayers-1 && !state.isEmpty()) {
            if (state.containsKey(trade.tradeCard)) {
                int num = state.get(trade.tradeCard);
                state.put(trade.tradeCard, num + 1);
            } else {
                state.put(trade.tradeCard, 1);
            }
        }

    }

    // Make an offer to a random player
    private void doTenderOffer() throws Exception {

        // if hit maxTrades limit, then stop sending trades
        if (maxTrades(maxTrades)) {
            return;
        }

        /*
         * If numPlayers == 0, while we have received a TenderOffer, we have not
         * received our NewHand yet, so we don't know how many players there
         * are.  Therefore, don't send out a TenderOffer at this time.
         *
         */
        if (numPlayers == 0) {
            return;
        }

        System.out.println("Tender Offer: PITplater"+myPlayerNumber+" has ");
        // My strategy is to send the card that has the least number.
        // So first, use a hashmap to store the card and the number it has
        HashMap<String, Integer> state1 = new HashMap();
        for (int i = 0; i < cards.size(); i++) {
            if (state1.containsKey(cards.get(i))) {
                int num = state1.get(cards.get(i));
                state1.put((String) cards.get(i), num + 1);
            } else {
                state1.put((String) cards.get(i), 1);
            }
            System.out.println(state1.get(cards.get(i))+(String)cards.get(i));
        }

        // Create a new offer from my set of cards, and send to another player
        TenderOffer newTrade = new TenderOffer();
        ArrayList<String> mins = new ArrayList<String>();
        ArrayList<Integer> value = new ArrayList<Integer>(state1.values());
        // sort to find the least number
        Collections.sort(value);

        // add all the cards that have the least number into th arraylist
        for (Object key : state1.keySet()) {
            if (state1.get(key)==value.get(0)){
                mins.add((String)key);
            }
        }
        // In the least number card list, choose a random card to send
        int index = (int) (Math.random()* mins.size());
        String min_s=mins.get(index);
        System.out.println("Tender Offer: min_s: "+min_s);
        cards.remove(min_s);
        newTrade.tradeCard = min_s;
        newTrade.sourcePlayer = myPlayerNumber;

        // Find a random player to trade to (not including myself)
        int sendTo = myPlayerNumber;
        while (sendTo == myPlayerNumber) {
            sendTo = Math.round((float) Math.random() * (numPlayers - 1));
        }

        //Send the card to the other player
        System.out.println("PITplayer" + myPlayerNumber + " offered: " + newTrade.tradeCard + " to player: " + sendTo);
        String sendToJNDI = "openejb:Resource/PITplayer" + sendTo;
        sendToQueue(sendToJNDI, newTrade);

    }

    // Create a string of hand size and all cards
    private String toString(ArrayList hand) {

        String cardsString = "size: " + hand.size() + " ";
        for (int i = 0; i < hand.size(); i++) {
            cardsString += hand.get(i) + " ";
        }
        return cardsString;
    }

    // Create a printable version of the "state".
    private String toString(HashMap<String, Integer> state) {
        String stateString = "";
        for (Iterator it = state.entrySet().iterator(); it.hasNext(); ) {
            Map.Entry entry = (Map.Entry) it.next();
            String commodity = (String) entry.getKey();
            int number = ((Integer) entry.getValue()).intValue();
            stateString += "{" + commodity + ":" + number + "} ";
        }
        return stateString;
    }

    // Send an object to a Queue, given its JNDI name
    private void sendToQueue(String queueJNDI, Serializable message) throws Exception {
        // Gather necessary JMS resources
        Context ctxt = new InitialContext();
        Connection con = ((ConnectionFactory) ctxt.lookup("openejb:Resource/myConnectionFactory")).createConnection();
        Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
        Queue q = (Queue) ctxt.lookup(queueJNDI);
        MessageProducer writer = session.createProducer(q);
        ObjectMessage msg = session.createObjectMessage(message);
        // Send the object to the Queue
        writer.send(msg);
        session.close();
        con.close();
        ctxt.close();
    }

    // Stop trading when the max number of Trades is reached
    private boolean maxTrades(int max) {
        if ((numTrades % 100) == 0) {
            System.out.println("PITplayer" + myPlayerNumber + " numTrades: " + numTrades);
        }
        return (numTrades++ < max) ? false : true;
    }

    private void doMarker(Marker marker) throws Exception {
        System.out.println("PITplayer" + myPlayerNumber + " received the marker from PITplayer " + marker.source);

        // If the player doesn't receive any marker or it doesn't receive the marker from one specific player, add the marker to the list
        if (!markers.contains(marker.source) && marker.source != -1) {
            markers.add(marker.source);
            System.out.println("PITplayer" + myPlayerNumber + " added the marker from PITplayer " + marker.source);
        }


        // If the state is empty, which means it doesn't enter into the snapshot, so it should record the state
        if (state.isEmpty()) {
            // first record its player number
            state.put("Player", myPlayerNumber);

            System.out.println("PITplayer" + myPlayerNumber + " recorded its state, and send marker to other players.");

            // Record the card and the number it has
            for (int i = 0; i < cards.size(); i++) {
                if (state.containsKey(cards.get(i))) {
                    int num = state.get(cards.get(i));
                    state.put((String) cards.get(i), num + 1);
                } else {
                    state.put((String) cards.get(i), 1);
                }
            }

            // send the marker to all other players through queue
            for (int i = 0; i < numPlayers; i++) {
                if (i != myPlayerNumber) {
                    Marker mark = new Marker(myPlayerNumber);
                    sendToQueue("openejb:Resource/PITplayer" + i, mark);
                }
            }
        }

        // If it receives all the marker from other players, it should report its state to queue, then clear the state and the marker list.
        if (markers.size() == numPlayers-1) {
            System.out.println("PITplayer" + myPlayerNumber + " sent state to queue.");

            sendToQueue("openejb:Resource/PITsnapshot", state);
            state.clear();
            markers.clear();
        }
    }
}
